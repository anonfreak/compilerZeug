/* Project:  COCKTAIL training
 * Descr:    LR parser for an expression language
 * Kind:     Parser specification (stub)
 * Author:   Dr. Juergen Vollmer <Juergen.Vollmer@informatik-vollmer.de>
 * $Id: expr.pars,v 1.4 2007/06/01 12:04:31 vollmer Exp vollmer $
 */

// Exercises:
//  - Add other arithmetic (binary - / **, unary + and -) operations.
//    Think about accosiactivity and operator precedence.
//  - Add identifiers as part of an expression to your grammer
//    extend the scanner.
//  - Add comma separated list of expressions. The list may be empty.
//   'expr_l' (expression list) should be the new grammar root symbol.
//  - Rewrite your grammar, so that precedences are used
//  - Add C-style statements (e.g. assignment, if, while and statement lists)
//    to your grammar. 'stmt' should be the new root symbol of your grammar
//  - Add those statements using Modula-style syntax.
//  - Add more test sources to test your grammar

SCANNER expr_scan

PARSER  expr_pars

GLOBAL {
 # include <stdio.h>
 # include "Tree.h"
}

PREC LEFT  '+' '-'
     LEFT  '*' '/'
     RIGHT '^'
     LEFT  UNARY

RULE
root = l:program
	{=> {TreeRoot = ReverseTree (l:tree);};}.

program = <
	= i:identifier b:block_scoped
	{tree := mprogram (i:Position, i:Ident, b:tree);}.
>.

block_scoped = <
	= 'begin' block_exec 'end'.
>. 
 
block_exec = <
	  = l:block_exec r:statement
	  {tree := mblocklist (l:tree, r:tree);}.
	  = 
	  {tree := mblocknostmt ();}.
>.

statement = <
	= d:declaration ';'
	{tree := mdeclaration (d:tree);}.
	= a:assignment ';'
	{tree := massignment (a:tree);}.
	= k:keyword
	{tree := mkeyword (k:tree);}.
>.

declaration = < 
	= l:'int' r:identifier
	{tree := mdecl_ident (l:Position, 'int', r:Ident);}.
	= l:'float' r:identifier
	{tree := mdecl_ident (l:Position, 'float', r:Ident);}.
	= l:'string' r:identifier
	{tree := mdecl_ident (l:Position, 'string', r:Ident);}.
	= l:'float' r:assignment
	{tree := mdecl_assignm (l:Position, 'float', r:tree);}.
	= l:'int' r:assignment
	{tree := mdecl_assignm (l:Position, 'int', r:tree);}.
	= l:'string' r:assignment
	{tree := mdecl_assignm (l:Position, 'string', r:tree);}.
>.

assignment = <
	= i:identifier '=' r:computation
	{tree := massign (i:Position, i:Ident, r:tree);}.
>.

computation = <
	= l:computation o:'+' r:ttt
	{tree := mbinary_comp (o:Position, '+', l:tree, r:tree);}.
	= l:computation o:'-' r:ttt
	{tree := mbinary_comp (o:Position, '-', l:tree, r:tree);}.
	= ttt.
>.

ttt = <
	= l:ttt o:'*' r:fff
	{tree := mbinary_comp (o:Position, '*', l:tree, r:tree);}.
	= l:ttt o:'/' r:fff
	{tree := mbinary_comp (o:Position, '/', l:tree, r:tree);}.
	= fff.
>.

fff = <
	= '(' computation ')'.
	= variable.
>.

variable = <
	= variable_.
	= o:'-' l:variable_ PREC UNARY
	{tree := munary_comp (o:Position, '-', l:tree);}.
	= o:'+' l:variable_ PREC UNARY
	{tree := munary_comp (o:Position, '+', l:tree);}.
>.

variable_ = <
	= i:identifier
	{tree := midentifier (i:Position, i:Ident);}.
	= s:string_const
	{tree := mstring_const (s:Position, s:Value);}.
	= i:int_const
	{tree := mint_const (i:Position, i:Value);}.
	= f:float_const
	{tree := mfloat_const (f:Position, f:Value);}.
>.

keyword = <
	= keyword_if.
	= keyword_while.
	= keyword_for.
>.

keyword_if = <
	= 'if' '(' c:condition ')' 'then' b:block_scoped e:keyword_elseif
	{tree := mkeyword_if(c:tree, b:tree, e:tree);}.
>.

keyword_elseif = <
	= 'elseif' '(' c:condition ')' 'then' b:block_scoped e:keyword_elseif
	{tree := mkeyword_if(c:tree, b:tree, e:tree);}.
	= keyword_else.
>.

keyword_else = <
	= 'else' b:block_scoped
	{tree := mkeyword_else(b:tree);}.
	= 
	{tree := mnokeyword();}.
>.

keyword_while = <
	= 'while' '(' c:condition ')' b:block_scoped
	{tree := mkeyword_while(c:tree, b:tree);}.
>.

keyword_for = <
	= 'for' '(' d:declaration ';' c:condition ';' a:assignment ')' b:block_scoped
	{tree := mkeyword_for(d:tree, c:tree, a:tree, b:tree);}.
>.

condition = <
	= l:computation c:'<' r:computation
	{tree := mbinary_comp (c:Position, '<', l:tree, r:tree);}.
	= l:computation c:'>' r:computation
	{tree := mbinary_comp (c:Position, '>', l:tree, r:tree);}.
	= l:computation c:'=' r:computation
	{tree := mbinary_comp (c:Position, '=', l:tree, r:tree);}.
	= l:computation c:'!=' r:computation
	{tree := mbinary_comp (c:Position, '!=', l:tree, r:tree);}.
>.

/* Tokens */
string_const: [Value: tIdent] {Value := NoIdent;}.
identifier:   [Ident: tIdent] {Ident := NoIdent;}.
int_const:    [Value: long]   {Value := 0;}.
float_const:  [Value: double] {Value := 0.0;}.

/* non-terminal attributes */
MODULE attributes
PROPERTY SYN
DECLARE
 block_scoped
 block_exec
 statement
 declaration
 assignment
 computation
 ttt
 fff
 variable
 variable_
 keyword
 keyword_if
 keyword_else
 keyword_elseif
 keyword_while
 keyword_for
 condition 
 program = [tree: tTree].
 
END attributes
