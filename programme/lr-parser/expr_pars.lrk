SCANNER expr_scan PARSER expr_pars
IMPORT {
}

EXPORT {
}

GLOBAL {

#@ line 25 "expr.pars"

 # include <stdio.h>


#@ line 16 "expr_pars.lrk"
# ifdef CommonParsAttrs
typedef struct { CommonParsAttrs } yytCommonParsAttrs;
#  define yyCommon yytCommonParsAttrs Common;
#  define yyCommonParsAttrs CommonParsAttrs
# else
#  define yyCommon
#  define yyCommonParsAttrs
# endif


typedef union {
expr_scan_tScanAttribute Scan;
yyCommon
} tParsAttribute;
}

LOCAL {
}

BEGIN {
}

CLOSE {
}

TOKEN

string_const = 1
identifier = 2
int_const = 3
float_const = 4
'begin' = 5
'int' = 6
'float' = 7
'string' = 8
'=' = 9
'(' = 10
')' = 11
'+' = 12
'-' = 13
'/' = 14
'*' = 15
'^' = 16
lvariable_ = 17
';' = 18
'if' = 19
'<' = 20
'>' = 21
'!=' = 22
'then' = 23
'elseif' = 24
'else' = 25
'while' = 26
'for' = 27
'end' = 28

OPER

LEFT  '+' '-'
LEFT  '*' '/'
RIGHT '^'
LEFT  UNARY

RULE

root : program .

#@ line 38 "expr.pars"
program : identifier block_scoped .

#@ line 42 "expr.pars"
block_scoped : 'begin' block_exec 'end' .

#@ line 46 "expr.pars"
block_exec : block_exec statement .
block_exec : statement .

#@ line 51 "expr.pars"
statement : declaration ';' .
statement : assignment ';' .
statement : keyword .
statement : .

#@ line 58 "expr.pars"
declaration : type identifier .
declaration : type assignment .

#@ line 63 "expr.pars"
type : 'int' .
type : 'float' .
type : 'string' .

#@ line 69 "expr.pars"
assignment : identifier '=' computation .

#@ line 73 "expr.pars"
computation : '(' computation ')' .
computation : computation operator variable .
computation : variable .

#@ line 79 "expr.pars"
operator : '+' .
operator : '-' .
operator : '/' .
operator : '*' .
operator : '^' .

#@ line 87 "expr.pars"
variable : variable_ .
variable : '-' variable_ PREC UNARY .
variable : '+' lvariable_ PREC UNARY .

#@ line 93 "expr.pars"
variable_ : identifier .
variable_ : string_const .
variable_ : int_const .
variable_ : float_const .

#@ line 100 "expr.pars"
keyword : keyword_if .
keyword : keyword_while .
keyword : keyword_for .

#@ line 106 "expr.pars"
keyword_if : 'if' '(' condition ')' 'then' block_scoped keyword_elseif .

#@ line 110 "expr.pars"
keyword_elseif : 'elseif' '(' condition ')' 'then' block_scoped keyword_elseif .
keyword_elseif : keyword_else .

#@ line 115 "expr.pars"
keyword_else : 'else' block_scoped .
keyword_else : .

#@ line 120 "expr.pars"
keyword_while : 'while' '(' condition ')' block_scoped .

#@ line 124 "expr.pars"
keyword_for : 'for' '(' declaration ';' condition ';' assignment ')' block_scoped .

#@ line 128 "expr.pars"
condition : computation compare computation .

#@ line 132 "expr.pars"
compare : '<' .
compare : '>' .
compare : '=' .
compare : '!=' .
