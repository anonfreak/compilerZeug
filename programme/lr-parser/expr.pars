/* Project:  COCKTAIL training
 * Descr:    LR parser for an expression language
 * Kind:     Parser specification (stub)
 * Author:   Dr. Juergen Vollmer <Juergen.Vollmer@informatik-vollmer.de>
 * $Id: expr.pars,v 1.4 2007/06/01 12:04:31 vollmer Exp vollmer $
 */

// Exercises:
//  - Add other arithmetic (binary - / **, unary + and -) operations.
//    Think about accosiactivity and operator precedence.
//  - Add identifiers as part of an expression to your grammer
//    extend the scanner.
//  - Add comma separated list of expressions. The list may be empty.
//   'expr_l' (expression list) should be the new grammar root symbol.
//  - Rewrite your grammar, so that precedences are used
//  - Add C-style statements (e.g. assignment, if, while and statement lists)
//    to your grammar. 'stmt' should be the new root symbol of your grammar
//  - Add those statements using Modula-style syntax.
//  - Add more test sources to test your grammar

SCANNER expr_scan

PARSER  expr_pars

GLOBAL {
 # include <stdio.h>
}

PREC LEFT  '+' '-'
     LEFT  '*' '/'
     RIGHT '^'
     LEFT  UNARY

RULE
root = program.

program = <
	= identifier block_scoped.
>.

block_scoped = <
	= 'begin' block_exec 'end'.
>.

block_exec = <
	= block_exec statement.
	= statement.
>.

statement = <
	= declaration ';'.
	= assignment ';'.
	= keyword.
	= .
>.

declaration = <
	= type identifier.
	= type assignment.
>.

type = <
	= 'int'.
	= 'float'.
	= 'string'.
>.

assignment = <
	= identifier '=' computation.
>.

computation = <
	= computation '+' ttt.
	= computation '-' ttt.
	= ttt.
>.

ttt = <
	= ttt '*' fff.
	= ttt '/' fff.
	= fff.
>.

fff = <
	= '(' computation ')'.
	= variable.
>.

//computation = <
//	= '(' computation ')'.
//	= computation operator variable.
//	= variable.
//	= computation2.
//>.

//operator = <
//	= '+'.
//	= '-'.
//	= '/'.
//	= '*'.
//	= '^'.
//>.

variable = <
	= variable_.
	= '-' variable_ PREC UNARY.
	= '+' lvariable_ PREC UNARY.
>.

variable_ = <
	= identifier.
	= string_const.
	= int_const.
	= float_const.
>.

keyword = <
	= keyword_if.
	= keyword_while.
	= keyword_for.
>.

keyword_if = <
	= 'if' '(' condition ')' 'then' block_scoped keyword_elseif.
>.

keyword_elseif = <
	= 'elseif' '(' condition ')' 'then' block_scoped keyword_elseif.
	= keyword_else.
>.

keyword_else = <
	= 'else' block_scoped.
	= .
>.

keyword_while = <
	= 'while' '(' condition ')' block_scoped.
>.

keyword_for = <
	= 'for' '(' declaration ';' condition ';' assignment ')' block_scoped.
>.

condition = <
	= computation compare computation.
>.

compare = <
	= '<'.
	= '>'.
	= '='.
	= '!='.
>.

/* Tokens */
string_const: [Value: tIdent] {Value := NoIdent;}.
identifier:   [Ident: tIdent] {Ident := NoIdent;}.
int_const:    [Value: long]   {Value := 0;}.
float_const:  [Value: double] {Value := 0.0;}.
